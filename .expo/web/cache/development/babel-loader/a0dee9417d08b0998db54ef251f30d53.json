{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar INPUT_CHANGE = \"INPUT_CHANGE\";\nvar INPUT_BLUR = \"INPUT_BLUR\";\nvar FORM_INPUT_UPDATE = \"FORM_INPUT_UPDATE\";\nexport var textChangeHandler = function textChangeHandler(props, text) {\n  return function _callee(dispatch) {\n    var emailRegex, isValid;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n            isValid = true;\n\n            if (props.required && text.trim().length === 0) {\n              isValid = false;\n            }\n\n            if (props.email && !emailRegex.test(text.toLowerCase())) {\n              isValid = false;\n            }\n\n            if (props.min != null && +text < props.min) {\n              isValid = false;\n            }\n\n            if (props.max != null && +text > props.max) {\n              isValid = false;\n            }\n\n            if (props.minLength != null && text.length < props.minLength) {\n              isValid = false;\n            }\n\n            dispatch({\n              type: INPUT_CHANGE,\n              value: text,\n              isValid: isValid\n            });\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            throw _context.t0;\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n};\nexport var lostFocusHandler = function lostFocusHandler() {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            dispatch({\n              type: INPUT_BLUR\n            });\n            _context2.next = 7;\n            break;\n\n          case 4:\n            _context2.prev = 4;\n            _context2.t0 = _context2[\"catch\"](0);\n            throw _context2.t0;\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 4]], Promise);\n  };\n};\nexport var formInputUpdate = function formInputUpdate() {};","map":{"version":3,"sources":["/home/turjoy/Desktop/Oil project/store/actions/form.js"],"names":["INPUT_CHANGE","INPUT_BLUR","FORM_INPUT_UPDATE","textChangeHandler","props","text","dispatch","emailRegex","isValid","required","trim","length","email","test","toLowerCase","min","max","minLength","type","value","lostFocusHandler","formInputUpdate"],"mappings":";AAAA,IAAMA,YAAY,GAAG,cAArB;AACA,IAAMC,UAAU,GAAG,YAAnB;AACA,IAAMC,iBAAiB,GAAG,mBAA1B;AAEA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAQC,IAAR,EAAiB;AAChD,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEGC,YAAAA,UAFH,GAGD,yJAHC;AAICC,YAAAA,OAJD,GAIW,IAJX;;AAKH,gBAAIJ,KAAK,CAACK,QAAN,IAAkBJ,IAAI,CAACK,IAAL,GAAYC,MAAZ,KAAuB,CAA7C,EAAgD;AAC9CH,cAAAA,OAAO,GAAG,KAAV;AACD;;AACD,gBAAIJ,KAAK,CAACQ,KAAN,IAAe,CAACL,UAAU,CAACM,IAAX,CAAgBR,IAAI,CAACS,WAAL,EAAhB,CAApB,EAAyD;AACvDN,cAAAA,OAAO,GAAG,KAAV;AACD;;AACD,gBAAIJ,KAAK,CAACW,GAAN,IAAa,IAAb,IAAqB,CAACV,IAAD,GAAQD,KAAK,CAACW,GAAvC,EAA4C;AAC1CP,cAAAA,OAAO,GAAG,KAAV;AACD;;AACD,gBAAIJ,KAAK,CAACY,GAAN,IAAa,IAAb,IAAqB,CAACX,IAAD,GAAQD,KAAK,CAACY,GAAvC,EAA4C;AAC1CR,cAAAA,OAAO,GAAG,KAAV;AACD;;AACD,gBAAIJ,KAAK,CAACa,SAAN,IAAmB,IAAnB,IAA2BZ,IAAI,CAACM,MAAL,GAAcP,KAAK,CAACa,SAAnD,EAA8D;AAC5DT,cAAAA,OAAO,GAAG,KAAV;AACD;;AACDF,YAAAA,QAAQ,CAAC;AAAEY,cAAAA,IAAI,EAAElB,YAAR;AAAsBmB,cAAAA,KAAK,EAAEd,IAA7B;AAAmCG,cAAAA,OAAO,EAAEA;AAA5C,aAAD,CAAR;AApBG;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAyBD,CA1BM;AA4BP,OAAO,IAAMY,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AACpC,SAAO,kBAAOd,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAEHA,YAAAA,QAAQ,CAAC;AAAEY,cAAAA,IAAI,EAAEjB;AAAR,aAAD,CAAR;AAFG;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAOD,CARM;AAUP,OAAO,IAAMoB,eAAe,GAAG,SAAlBA,eAAkB,GAAM,CAAE,CAAhC","sourcesContent":["const INPUT_CHANGE = \"INPUT_CHANGE\";\nconst INPUT_BLUR = \"INPUT_BLUR\";\nconst FORM_INPUT_UPDATE = \"FORM_INPUT_UPDATE\";\n\nexport const textChangeHandler = (props, text) => {\n  return async (dispatch) => {\n    try {\n      const emailRegex =\n        /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      let isValid = true;\n      if (props.required && text.trim().length === 0) {\n        isValid = false;\n      }\n      if (props.email && !emailRegex.test(text.toLowerCase())) {\n        isValid = false;\n      }\n      if (props.min != null && +text < props.min) {\n        isValid = false;\n      }\n      if (props.max != null && +text > props.max) {\n        isValid = false;\n      }\n      if (props.minLength != null && text.length < props.minLength) {\n        isValid = false;\n      }\n      dispatch({ type: INPUT_CHANGE, value: text, isValid: isValid });\n    } catch (err) {\n      throw err;\n    }\n  };\n};\n\nexport const lostFocusHandler = () => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: INPUT_BLUR });\n    } catch (err) {\n      throw err;\n    }\n  };\n};\n\nexport const formInputUpdate = () => {};\n"]},"metadata":{},"sourceType":"module"}