{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { INPUT_CHANGE, INPUT_BLUR, FORM_INPUT_UPDATE } from \"../actions/form\";\nvar initialState = {\n  inputValues: {\n    email: \"\",\n    password: \"\"\n  },\n  inputValidities: {\n    email: false,\n    password: false\n  },\n  formIsValid: false\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case INPUT_CHANGE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        value: action.value,\n        isValid: action.isValid\n      });\n\n    case INPUT_BLUR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        touched: true\n      });\n\n    case FORM_INPUT_UPDATE:\n      var updatedValues = _objectSpread(_objectSpread({}, state.inputValues), {}, _defineProperty({}, action.input, action.value));\n\n      var updatedValidities = _objectSpread(_objectSpread({}, state.inputValidities), {}, _defineProperty({}, action.input, action.isValid));\n\n      var updatedFormIsValid = true;\n\n      for (var key in updatedValidities) {\n        updatedFormIsValid = updatedFormIsValid && updatedValidities[key];\n      }\n\n      return {\n        formIsValid: updatedFormIsValid,\n        inputValidities: updatedValidities,\n        inputValues: updatedValues\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/turjoy/Desktop/Oil project/store/reducers/form.js"],"names":["INPUT_CHANGE","INPUT_BLUR","FORM_INPUT_UPDATE","initialState","inputValues","email","password","inputValidities","formIsValid","state","action","type","value","isValid","touched","updatedValues","input","updatedValidities","updatedFormIsValid","key"],"mappings":";;;;;;AAAA,SAASA,YAAT,EAAuBC,UAAvB,EAAmCC,iBAAnC;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE;AACXC,IAAAA,KAAK,EAAE,EADI;AAEXC,IAAAA,QAAQ,EAAE;AAFC,GADM;AAKnBC,EAAAA,eAAe,EAAE;AACfF,IAAAA,KAAK,EAAE,KADQ;AAEfC,IAAAA,QAAQ,EAAE;AAFK,GALE;AASnBE,EAAAA,WAAW,EAAE;AATM,CAArB;AAYA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,YAAL;AACE,6CACKS,KADL;AAEEG,QAAAA,KAAK,EAAEF,MAAM,CAACE,KAFhB;AAGEC,QAAAA,OAAO,EAAEH,MAAM,CAACG;AAHlB;;AAKF,SAAKZ,UAAL;AACE,6CACKQ,KADL;AAEEK,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAKZ,iBAAL;AACE,UAAMa,aAAa,mCACdN,KAAK,CAACL,WADQ,2BAEhBM,MAAM,CAACM,KAFS,EAEDN,MAAM,CAACE,KAFN,EAAnB;;AAIA,UAAMK,iBAAiB,mCAClBR,KAAK,CAACF,eADY,2BAEpBG,MAAM,CAACM,KAFa,EAELN,MAAM,CAACG,OAFF,EAAvB;;AAIA,UAAIK,kBAAkB,GAAG,IAAzB;;AACA,WAAK,IAAMC,GAAX,IAAkBF,iBAAlB,EAAqC;AACnCC,QAAAA,kBAAkB,GAAGA,kBAAkB,IAAID,iBAAiB,CAACE,GAAD,CAA5D;AACD;;AACD,aAAO;AACLX,QAAAA,WAAW,EAAEU,kBADR;AAELX,QAAAA,eAAe,EAAEU,iBAFZ;AAGLb,QAAAA,WAAW,EAAEW;AAHR,OAAP;;AAKF;AACE,aAAON,KAAP;AA/BJ;AAiCD,CAlCD","sourcesContent":["import { INPUT_CHANGE, INPUT_BLUR, FORM_INPUT_UPDATE } from \"../actions/form\";\n\nconst initialState = {\n  inputValues: {\n    email: \"\",\n    password: \"\",\n  },\n  inputValidities: {\n    email: false,\n    password: false,\n  },\n  formIsValid: false,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case INPUT_CHANGE:\n      return {\n        ...state,\n        value: action.value,\n        isValid: action.isValid,\n      };\n    case INPUT_BLUR:\n      return {\n        ...state,\n        touched: true,\n      };\n    case FORM_INPUT_UPDATE:\n      const updatedValues = {\n        ...state.inputValues,\n        [action.input]: action.value,\n      };\n      const updatedValidities = {\n        ...state.inputValidities,\n        [action.input]: action.isValid,\n      };\n      let updatedFormIsValid = true;\n      for (const key in updatedValidities) {\n        updatedFormIsValid = updatedFormIsValid && updatedValidities[key];\n      }\n      return {\n        formIsValid: updatedFormIsValid,\n        inputValidities: updatedValidities,\n        inputValues: updatedValues,\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}